// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: practiceService.proto

package practiceProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaperService_LevelList_FullMethodName    = "/service.PaperService/LevelList"
	PaperService_PaperList_FullMethodName    = "/service.PaperService/PaperList"
	PaperService_QuestionList_FullMethodName = "/service.PaperService/QuestionList"
	PaperService_TableStruct_FullMethodName  = "/service.PaperService/TableStruct"
)

// PaperServiceClient is the client API for PaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaperServiceClient interface {
	LevelList(ctx context.Context, in *LevelListRequest, opts ...grpc.CallOption) (*LevelListResponse, error)
	PaperList(ctx context.Context, in *PaperListRequest, opts ...grpc.CallOption) (*PaperListResponse, error)
	QuestionList(ctx context.Context, in *QuestionListRequest, opts ...grpc.CallOption) (*QuestionListResponse, error)
	TableStruct(ctx context.Context, in *TableStructRequest, opts ...grpc.CallOption) (*TableStructResponse, error)
}

type paperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperServiceClient(cc grpc.ClientConnInterface) PaperServiceClient {
	return &paperServiceClient{cc}
}

func (c *paperServiceClient) LevelList(ctx context.Context, in *LevelListRequest, opts ...grpc.CallOption) (*LevelListResponse, error) {
	out := new(LevelListResponse)
	err := c.cc.Invoke(ctx, PaperService_LevelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) PaperList(ctx context.Context, in *PaperListRequest, opts ...grpc.CallOption) (*PaperListResponse, error) {
	out := new(PaperListResponse)
	err := c.cc.Invoke(ctx, PaperService_PaperList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) QuestionList(ctx context.Context, in *QuestionListRequest, opts ...grpc.CallOption) (*QuestionListResponse, error) {
	out := new(QuestionListResponse)
	err := c.cc.Invoke(ctx, PaperService_QuestionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperServiceClient) TableStruct(ctx context.Context, in *TableStructRequest, opts ...grpc.CallOption) (*TableStructResponse, error) {
	out := new(TableStructResponse)
	err := c.cc.Invoke(ctx, PaperService_TableStruct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaperServiceServer is the server API for PaperService service.
// All implementations must embed UnimplementedPaperServiceServer
// for forward compatibility
type PaperServiceServer interface {
	LevelList(context.Context, *LevelListRequest) (*LevelListResponse, error)
	PaperList(context.Context, *PaperListRequest) (*PaperListResponse, error)
	QuestionList(context.Context, *QuestionListRequest) (*QuestionListResponse, error)
	TableStruct(context.Context, *TableStructRequest) (*TableStructResponse, error)
	mustEmbedUnimplementedPaperServiceServer()
}

// UnimplementedPaperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaperServiceServer struct {
}

func (UnimplementedPaperServiceServer) LevelList(context.Context, *LevelListRequest) (*LevelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelList not implemented")
}
func (UnimplementedPaperServiceServer) PaperList(context.Context, *PaperListRequest) (*PaperListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaperList not implemented")
}
func (UnimplementedPaperServiceServer) QuestionList(context.Context, *QuestionListRequest) (*QuestionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionList not implemented")
}
func (UnimplementedPaperServiceServer) TableStruct(context.Context, *TableStructRequest) (*TableStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableStruct not implemented")
}
func (UnimplementedPaperServiceServer) mustEmbedUnimplementedPaperServiceServer() {}

// UnsafePaperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperServiceServer will
// result in compilation errors.
type UnsafePaperServiceServer interface {
	mustEmbedUnimplementedPaperServiceServer()
}

func RegisterPaperServiceServer(s grpc.ServiceRegistrar, srv PaperServiceServer) {
	s.RegisterService(&PaperService_ServiceDesc, srv)
}

func _PaperService_LevelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).LevelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_LevelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).LevelList(ctx, req.(*LevelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_PaperList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaperListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).PaperList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_PaperList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).PaperList(ctx, req.(*PaperListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_QuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).QuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_QuestionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).QuestionList(ctx, req.(*QuestionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperService_TableStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServiceServer).TableStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperService_TableStruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServiceServer).TableStruct(ctx, req.(*TableStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaperService_ServiceDesc is the grpc.ServiceDesc for PaperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.PaperService",
	HandlerType: (*PaperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LevelList",
			Handler:    _PaperService_LevelList_Handler,
		},
		{
			MethodName: "PaperList",
			Handler:    _PaperService_PaperList_Handler,
		},
		{
			MethodName: "QuestionList",
			Handler:    _PaperService_QuestionList_Handler,
		},
		{
			MethodName: "TableStruct",
			Handler:    _PaperService_TableStruct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practiceService.proto",
}
